1.CNN ANTRENARE (Rețea Neuronală Convoluțională)
-------------------------------------------------------------------------------------------------------------------
C:\Users\Lenovo\Desktop\Licenta\PianoNotesAudioRecognition\.venv\Scripts\python.exe C:\Users\Lenovo\Desktop\Licenta\PianoNotesAudioRecognition\AntrenareDataset.py
Commands: ['Do#0' 'Do#1' 'Do#2' 'Do#3' 'Do#4' 'Do#5' 'Do#6' 'Do#7' 'Do#8' 'Do0'
 'Do1' 'Do2' 'Do3' 'Do4' 'Do5' 'Do6' 'Do7' 'Do8' 'Fa#0' 'Fa#1' 'Fa#2'
 'Fa#3' 'Fa#4' 'Fa#5' 'Fa#6' 'Fa#7' 'Fa0' 'Fa1' 'Fa2' 'Fa3' 'Fa4' 'Fa5'
 'Fa6' 'Fa7' 'La#-1' 'La#0' 'La#1' 'La#2' 'La#3' 'La#4' 'La#5' 'La#6'
 'La#7' 'La-1' 'La0' 'La1' 'La2' 'La3' 'La4' 'La5' 'La6' 'La7' 'Mi0' 'Mi1'
 'Mi2' 'Mi3' 'Mi4' 'Mi5' 'Mi6' 'Mi7' 'Re#0' 'Re#1' 'Re#2' 'Re#3' 'Re#4'
 'Re#5' 'Re#6' 'Re#7' 'Re0' 'Re1' 'Re2' 'Re3' 'Re4' 'Re5' 'Re6' 'Re7'
 'Re8' 'Si-1' 'Si0' 'Si1' 'Si2' 'Si3' 'Si4' 'Si5' 'Si6' 'Si7' 'Sol#0'
 'Sol#1' 'Sol#2' 'Sol#3' 'Sol#4' 'Sol#5' 'Sol#6' 'Sol#7' 'Sol0' 'Sol1'
 'Sol2' 'Sol3' 'Sol4' 'Sol5' 'Sol6' 'Sol7']
Found 51821 files belonging to 102 classes.
Using 41457 files for training.
Using 10364 files for validation.
2025-04-28 14:10:00.484363: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: SSE SSE2 SSE3 SSE4.1 SSE4.2 AVX AVX2 AVX512F AVX512_VNNI AVX512_BF16 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.

label names: ['Do#0' 'Do#1' 'Do#2' 'Do#3' 'Do#4' 'Do#5' 'Do#6' 'Do#7' 'Do#8' 'Do0'
 'Do1' 'Do2' 'Do3' 'Do4' 'Do5' 'Do6' 'Do7' 'Do8' 'Fa#0' 'Fa#1' 'Fa#2'
 'Fa#3' 'Fa#4' 'Fa#5' 'Fa#6' 'Fa#7' 'Fa0' 'Fa1' 'Fa2' 'Fa3' 'Fa4' 'Fa5'
 'Fa6' 'Fa7' 'La#-1' 'La#0' 'La#1' 'La#2' 'La#3' 'La#4' 'La#5' 'La#6'
 'La#7' 'La-1' 'La0' 'La1' 'La2' 'La3' 'La4' 'La5' 'La6' 'La7' 'Mi0' 'Mi1'
 'Mi2' 'Mi3' 'Mi4' 'Mi5' 'Mi6' 'Mi7' 'Re#0' 'Re#1' 'Re#2' 'Re#3' 'Re#4'
 'Re#5' 'Re#6' 'Re#7' 'Re0' 'Re1' 'Re2' 'Re3' 'Re4' 'Re5' 'Re6' 'Re7'
 'Re8' 'Si-1' 'Si0' 'Si1' 'Si2' 'Si3' 'Si4' 'Si5' 'Si6' 'Si7' 'Sol#0'
 'Sol#1' 'Sol#2' 'Sol#3' 'Sol#4' 'Sol#5' 'Sol#6' 'Sol#7' 'Sol0' 'Sol1'
 'Sol2' 'Sol3' 'Sol4' 'Sol5' 'Sol6' 'Sol7']
(64, 64000)
(64,)
Label: Mi2
Waveform shape: (64000,)
Spectrogram shape: (499, 129, 1)
Audio playback
<IPython.lib.display.Audio object>
Label: La#2
Waveform shape: (64000,)
Spectrogram shape: (499, 129, 1)
Audio playback
<IPython.lib.display.Audio object>
Label: Re5
Waveform shape: (64000,)
Spectrogram shape: (499, 129, 1)
Audio playback
<IPython.lib.display.Audio object>
Input shape: (499, 129, 1)
2025-04-28 14:10:17.265122: I tensorflow/core/kernels/data/shuffle_dataset_op.cc:422] Filling up shuffle buffer (this may take a while): 132 of 10000
2025-04-28 14:10:27.306639: I tensorflow/core/kernels/data/shuffle_dataset_op.cc:422] Filling up shuffle buffer (this may take a while): 271 of 10000
2025-04-28 14:10:37.275023: I tensorflow/core/kernels/data/shuffle_dataset_op.cc:422] Filling up shuffle buffer (this may take a while): 426 of 10000
2025-04-28 14:10:47.303099: I tensorflow/core/kernels/data/shuffle_dataset_op.cc:422] Filling up shuffle buffer (this may take a while): 589 of 10000
2025-04-28 14:10:50.546247: I tensorflow/core/kernels/data/shuffle_dataset_op.cc:450] Shuffle buffer filled.
Model: "sequential"
_________________________________________________________________
 Layer (type)                Output Shape              Param #
=================================================================
 resizing (Resizing)         (None, 32, 32, 1)         0

 normalization (Normalizati  (None, 32, 32, 1)         3
 on)

 conv2d (Conv2D)             (None, 30, 30, 32)        320

 conv2d_1 (Conv2D)           (None, 28, 28, 64)        18496

 max_pooling2d (MaxPooling2  (None, 14, 14, 64)        0
 D)

 dropout (Dropout)           (None, 14, 14, 64)        0

 flatten (Flatten)           (None, 12544)             0

 dense (Dense)               (None, 128)               1605760

 dropout_1 (Dropout)         (None, 128)               0

 dense_1 (Dense)             (None, 102)               13158

=================================================================
Total params: 1637737 (6.25 MB)
Trainable params: 1637734 (6.25 MB)
Non-trainable params: 3 (16.00 Byte)
_________________________________________________________________
Epoch 1/10
648/648 [==============================] - 58s 89ms/step - loss: 2.9250 - accuracy: 0.2792 - val_loss: 2.0820 - val_accuracy: 0.4627
Epoch 2/10
648/648 [==============================] - 56s 87ms/step - loss: 2.1572 - accuracy: 0.4335 - val_loss: 1.8195 - val_accuracy: 0.5166
Epoch 3/10
648/648 [==============================] - 53s 82ms/step - loss: 1.9407 - accuracy: 0.4798 - val_loss: 1.6732 - val_accuracy: 0.5500
Epoch 4/10
648/648 [==============================] - 57s 89ms/step - loss: 1.8049 - accuracy: 0.5053 - val_loss: 1.5643 - val_accuracy: 0.5697
Epoch 5/10
648/648 [==============================] - 58s 89ms/step - loss: 1.7029 - accuracy: 0.5245 - val_loss: 1.4732 - val_accuracy: 0.5795
Epoch 6/10
648/648 [==============================] - 52s 80ms/step - loss: 1.6280 - accuracy: 0.5421 - val_loss: 1.4134 - val_accuracy: 0.6044
Epoch 7/10
648/648 [==============================] - 50s 78ms/step - loss: 1.5669 - accuracy: 0.5524 - val_loss: 1.3355 - val_accuracy: 0.6214
Epoch 8/10
648/648 [==============================] - 52s 81ms/step - loss: 1.5084 - accuracy: 0.5674 - val_loss: 1.2911 - val_accuracy: 0.6419
Epoch 9/10
648/648 [==============================] - 52s 81ms/step - loss: 1.4661 - accuracy: 0.5781 - val_loss: 1.2470 - val_accuracy: 0.6490
Epoch 10/10
648/648 [==============================] - 51s 79ms/step - loss: 1.4114 - accuracy: 0.5870 - val_loss: 1.2021 - val_accuracy: 0.6651
81/81 [==============================] - 5s 52ms/step - loss: 1.2070 - accuracy: 0.6551
81/81 [==============================] - 1s 15ms/step

Process finished with exit code 0


Desigur! În baza logurilor tale și a codului care implementează Rețele Neuronale Convoluționale (CNN), iată o explicație pas cu pas a ceea ce semnifică acestea în contextul antrenării modelului:

Ce reprezintă logurile afișate?
- Comenzi și clase identificate (Labels):- Etichetele (label names) indică notele muzicale care sunt antrenate și clasificate, de exemplu: Do#0, Re5, Mi2, etc.
- Sistemul a găsit 51821 fișiere audio împărțite în 102 clase diferite (fiecare clasă reprezintă o notă muzicală distinctă).

- Împărțirea datelor:- 41457 fișiere sunt utilizate pentru antrenare.
- 10364 fișiere sunt utilizate pentru validare, pentru a evalua performanța modelului pe date care nu au fost folosite în procesul de învățare.



Modelul CNN (Rețea Neuronală Convoluțională)
- Preprocesarea datelor:- Forma spectrogramelor (input) este de 499 x 129 x 1. Aceste spectrograme reprezintă datele audio transformate într-un format vizual ce poate fi procesat de un CNN.

- Structura modelului:- Layer 1: Resizing (Redimensionare) pentru a standardiza dimensiunea de intrare la 32 x 32 x 1.
- Layer 2: Normalization (Normalizare) pentru scalarea valorilor astfel încât să fie mai ușor de procesat.
- Conv2D și MaxPooling:- Două straturi convoluționale (Conv2D) detectează caracteristici precum variații ale frecvenței în spectrogramă.
- MaxPooling reduce dimensiunea spațială pentru eficiență computațională.

- Dropout: Previne supraantrenarea prin "oprirea" aleatorie a unor neuroni în timpul antrenării.
- Dense Layer: Straturi complet conectate care sintetizează informația extrasă de Conv2D și iau decizia finală (clasa notă muzicală).

- Parametrii:- Numărul total de parametri: 1.637.737 (aproximativ 6.25 MB).
- Parametri antrenabili: 1.637.734 (parametri care se ajustează în timpul antrenării).
- Non-trainable parameters: 3 (parametri statici, precum cei de normalizare).



Rezultatele antrenării pe Epoci:
- Epoch 1-10:- Se observă îmbunătățirea continuă a performanței modelului:- Loss (pierdere): Scade de la 2.9250 la 1.4114 (indicator că modelul "învață" mai bine).
- Accuracy (acuratețe): Crește de la 27.92% la 58.70% pe setul de antrenare.
- Val_Accuracy (acuratețe pe setul de validare): Ajunge la 66.51%, ceea ce sugerează o generalizare bună a modelului.




Legătura cu codul TensorFlow Simple Audio Recognition:
- Codul din tutorialul TensorFlow este conceput pentru recunoașterea audio simplă, adaptat aici pentru a clasifica notele muzicale.
- Folosește spectrograme pentru a transforma semnalele audio în date vizuale, procesate de rețeaua CNN.

F1 Score: 0.5927912484412722



VARIANTA 2 : CU 20 EPOCH SI MAI MULTE FILTRE
Model: "sequential"
_________________________________________________________________
 Layer (type)                Output Shape              Param #
=================================================================
 resizing (Resizing)         (None, 32, 32, 1)         0

 normalization (Normalizati  (None, 32, 32, 1)         3
 on)

 conv2d (Conv2D)             (None, 30, 30, 64)        640

 conv2d_1 (Conv2D)           (None, 28, 28, 128)       73856

 conv2d_2 (Conv2D)           (None, 26, 26, 128)       147584

 max_pooling2d (MaxPooling2  (None, 13, 13, 128)       0
 D)

 dropout (Dropout)           (None, 13, 13, 128)       0

 flatten (Flatten)           (None, 21632)             0

 dense (Dense)               (None, 256)               5538048

 dropout_1 (Dropout)         (None, 256)               0

 dense_1 (Dense)             (None, 102)               26214

=================================================================
Total params: 5786345 (22.07 MB)
Trainable params: 5786342 (22.07 MB)
Non-trainable params: 3 (16.00 Byte)
_________________________________________________________________
Epoch 1/20
648/648 [==============================] - 162s 249ms/step - loss: 2.5915 - accuracy: 0.3612 - val_loss: 1.8106 - val_accuracy: 0.5201
Epoch 2/20
648/648 [==============================] - 159s 245ms/step - loss: 1.8003 - accuracy: 0.5199 - val_loss: 1.4843 - val_accuracy: 0.5956
Epoch 3/20
648/648 [==============================] - 135s 208ms/step - loss: 1.5437 - accuracy: 0.5712 - val_loss: 1.3377 - val_accuracy: 0.6245
Epoch 4/20
648/648 [==============================] - 107s 165ms/step - loss: 1.3831 - accuracy: 0.6067 - val_loss: 1.1712 - val_accuracy: 0.6759
Epoch 5/20
648/648 [==============================] - 111s 172ms/step - loss: 1.2640 - accuracy: 0.6345 - val_loss: 1.0738 - val_accuracy: 0.6946
Epoch 6/20
648/648 [==============================] - 110s 170ms/step - loss: 1.1569 - accuracy: 0.6604 - val_loss: 1.0035 - val_accuracy: 0.7199
Epoch 7/20
648/648 [==============================] - 107s 166ms/step - loss: 1.0684 - accuracy: 0.6825 - val_loss: 0.9162 - val_accuracy: 0.7286
Epoch 8/20
648/648 [==============================] - 114s 177ms/step - loss: 0.9954 - accuracy: 0.6996 - val_loss: 0.8564 - val_accuracy: 0.7533
Epoch 9/20
648/648 [==============================] - 107s 166ms/step - loss: 0.9366 - accuracy: 0.7151 - val_loss: 0.8104 - val_accuracy: 0.7608
Epoch 10/20
648/648 [==============================] - 106s 163ms/step - loss: 0.8730 - accuracy: 0.7315 - val_loss: 0.7717 - val_accuracy: 0.7776
Epoch 11/20
648/648 [==============================] - 293s 453ms/step - loss: 0.8321 - accuracy: 0.7452 - val_loss: 0.7458 - val_accuracy: 0.7871
Epoch 12/20
648/648 [==============================] - 106s 164ms/step - loss: 0.7927 - accuracy: 0.7548 - val_loss: 0.6906 - val_accuracy: 0.7925
Epoch 13/20
648/648 [==============================] - 103s 159ms/step - loss: 0.7421 - accuracy: 0.7693 - val_loss: 0.6996 - val_accuracy: 0.7961
Epoch 14/20
648/648 [==============================] - 1667s 3s/step - loss: 0.6997 - accuracy: 0.7795 - val_loss: 0.6626 - val_accuracy: 0.8033
Epoch 15/20
648/648 [==============================] - 101s 156ms/step - loss: 0.6849 - accuracy: 0.7827 - val_loss: 0.6346 - val_accuracy: 0.8143
Epoch 16/20
648/648 [==============================] - 104s 161ms/step - loss: 0.6531 - accuracy: 0.7945 - val_loss: 0.6275 - val_accuracy: 0.8131
Epoch 17/20
648/648 [==============================] - 108s 167ms/step - loss: 0.6336 - accuracy: 0.8000 - val_loss: 0.6124 - val_accuracy: 0.8205
Epoch 18/20
648/648 [==============================] - 121s 187ms/step - loss: 0.6092 - accuracy: 0.8078 - val_loss: 0.6043 - val_accuracy: 0.8170
Epoch 19/20
648/648 [==============================] - 111s 172ms/step - loss: 0.5856 - accuracy: 0.8155 - val_loss: 0.5820 - val_accuracy: 0.8274
Epoch 20/20
648/648 [==============================] - 105s 162ms/step - loss: 0.5623 - accuracy: 0.8195 - val_loss: 0.5736 - val_accuracy: 0.8322
81/81 [==============================] - 10s 122ms/step - loss: 0.5812 - accuracy: 0.8260
81/81 [==============================] - 3s 35ms/step
81/81 [==============================] - 3s 35ms/step
F1 Score: 0.7647748846170254



###########################################################################################################################################
####################################################################################################################################################
2.RNN ANTRENARE(Rețea Neuronală Recursivă)
C:\Users\Lenovo\Desktop\Licenta\PianoNotesAudioRecognition\.venv\Scripts\python.exe C:\Users\Lenovo\Desktop\Licenta\PianoNotesAudioRecognition\AntrenareRNN.py
Commands: ['Do#0' 'Do#1' 'Do#2' 'Do#3' 'Do#4' 'Do#5' 'Do#6' 'Do#7' 'Do#8' 'Do0'
 'Do1' 'Do2' 'Do3' 'Do4' 'Do5' 'Do6' 'Do7' 'Do8' 'Fa#0' 'Fa#1' 'Fa#2'
 'Fa#3' 'Fa#4' 'Fa#5' 'Fa#6' 'Fa#7' 'Fa0' 'Fa1' 'Fa2' 'Fa3' 'Fa4' 'Fa5'
 'Fa6' 'Fa7' 'La#-1' 'La#0' 'La#1' 'La#2' 'La#3' 'La#4' 'La#5' 'La#6'
 'La#7' 'La-1' 'La0' 'La1' 'La2' 'La3' 'La4' 'La5' 'La6' 'La7' 'Mi0' 'Mi1'
 'Mi2' 'Mi3' 'Mi4' 'Mi5' 'Mi6' 'Mi7' 'Re#0' 'Re#1' 'Re#2' 'Re#3' 'Re#4'
 'Re#5' 'Re#6' 'Re#7' 'Re0' 'Re1' 'Re2' 'Re3' 'Re4' 'Re5' 'Re6' 'Re7'
 'Re8' 'Si-1' 'Si0' 'Si1' 'Si2' 'Si3' 'Si4' 'Si5' 'Si6' 'Si7' 'Sol#0'
 'Sol#1' 'Sol#2' 'Sol#3' 'Sol#4' 'Sol#5' 'Sol#6' 'Sol#7' 'Sol0' 'Sol1'
 'Sol2' 'Sol3' 'Sol4' 'Sol5' 'Sol6' 'Sol7']
Found 51821 files belonging to 102 classes.
Using 41457 files for training.
Using 10364 files for validation.
2025-04-28 18:52:41.014355: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: SSE SSE2 SSE3 SSE4.1 SSE4.2 AVX AVX2 AVX512F AVX512_VNNI AVX512_BF16 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.

label names: ['Do#0' 'Do#1' 'Do#2' 'Do#3' 'Do#4' 'Do#5' 'Do#6' 'Do#7' 'Do#8' 'Do0'
 'Do1' 'Do2' 'Do3' 'Do4' 'Do5' 'Do6' 'Do7' 'Do8' 'Fa#0' 'Fa#1' 'Fa#2'
 'Fa#3' 'Fa#4' 'Fa#5' 'Fa#6' 'Fa#7' 'Fa0' 'Fa1' 'Fa2' 'Fa3' 'Fa4' 'Fa5'
 'Fa6' 'Fa7' 'La#-1' 'La#0' 'La#1' 'La#2' 'La#3' 'La#4' 'La#5' 'La#6'
 'La#7' 'La-1' 'La0' 'La1' 'La2' 'La3' 'La4' 'La5' 'La6' 'La7' 'Mi0' 'Mi1'
 'Mi2' 'Mi3' 'Mi4' 'Mi5' 'Mi6' 'Mi7' 'Re#0' 'Re#1' 'Re#2' 'Re#3' 'Re#4'
 'Re#5' 'Re#6' 'Re#7' 'Re0' 'Re1' 'Re2' 'Re3' 'Re4' 'Re5' 'Re6' 'Re7'
 'Re8' 'Si-1' 'Si0' 'Si1' 'Si2' 'Si3' 'Si4' 'Si5' 'Si6' 'Si7' 'Sol#0'
 'Sol#1' 'Sol#2' 'Sol#3' 'Sol#4' 'Sol#5' 'Sol#6' 'Sol#7' 'Sol0' 'Sol1'
 'Sol2' 'Sol3' 'Sol4' 'Sol5' 'Sol6' 'Sol7']
(64, 64000)
(64,)
Label: Mi2
Waveform shape: (64000,)
Spectrogram shape: (499, 129, 1)
Audio playback
<IPython.lib.display.Audio object>
Label: La#2
Waveform shape: (64000,)
Spectrogram shape: (499, 129, 1)
Audio playback
<IPython.lib.display.Audio object>
Label: Re5
Waveform shape: (64000,)
Spectrogram shape: (499, 129, 1)
Audio playback
<IPython.lib.display.Audio object>
Input shape: (499, 129, 1)
2025-04-28 18:52:55.289747: I tensorflow/core/kernels/data/shuffle_dataset_op.cc:422] Filling up shuffle buffer (this may take a while): 386 of 10000
2025-04-28 18:53:02.022165: I tensorflow/core/kernels/data/shuffle_dataset_op.cc:450] Shuffle buffer filled.
Epoch 1/10
648/648 [==============================] - 15s 22ms/step - loss: 3.3996 - accuracy: 0.1304 - val_loss: 2.8531 - val_accuracy: 0.2261
Epoch 2/10
648/648 [==============================] - 6s 9ms/step - loss: 2.8467 - accuracy: 0.2174 - val_loss: 2.6792 - val_accuracy: 0.2589
Epoch 3/10
648/648 [==============================] - 6s 9ms/step - loss: 2.6491 - accuracy: 0.2656 - val_loss: 2.5276 - val_accuracy: 0.2988
Epoch 4/10
648/648 [==============================] - 6s 9ms/step - loss: 2.5289 - accuracy: 0.2995 - val_loss: 2.3953 - val_accuracy: 0.3355
Epoch 5/10
648/648 [==============================] - 6s 9ms/step - loss: 2.4588 - accuracy: 0.3171 - val_loss: 2.3831 - val_accuracy: 0.3301
Epoch 6/10
648/648 [==============================] - 6s 9ms/step - loss: 2.3895 - accuracy: 0.3373 - val_loss: 2.3360 - val_accuracy: 0.3454
Epoch 7/10
648/648 [==============================] - 6s 9ms/step - loss: 2.3520 - accuracy: 0.3475 - val_loss: 2.2718 - val_accuracy: 0.3622
Epoch 8/10
648/648 [==============================] - 6s 9ms/step - loss: 2.3179 - accuracy: 0.3554 - val_loss: 2.2798 - val_accuracy: 0.3595
Epoch 9/10
648/648 [==============================] - 6s 9ms/step - loss: 2.2821 - accuracy: 0.3674 - val_loss: 2.2167 - val_accuracy: 0.3751
Epoch 10/10
648/648 [==============================] - 6s 9ms/step - loss: 2.2664 - accuracy: 0.3695 - val_loss: 2.1904 - val_accuracy: 0.3838
81/81 [==============================] - 4s 45ms/step - loss: 2.1792 - accuracy: 0.3860
81/81 [==============================] - 1s4ms/step




3. MLP ANTRENARE Multilayer Perceptron
C:\Users\Lenovo\Desktop\Licenta\PianoNotesAudioRecognition\.venv\Scripts\python.exe C:\Users\Lenovo\Desktop\Licenta\PianoNotesAudioRecognition\AntrenareMLP.py
Commands: ['Do#0' 'Do#1' 'Do#2' 'Do#3' 'Do#4' 'Do#5' 'Do#6' 'Do#7' 'Do#8' 'Do0'
 'Do1' 'Do2' 'Do3' 'Do4' 'Do5' 'Do6' 'Do7' 'Do8' 'Fa#0' 'Fa#1' 'Fa#2'
 'Fa#3' 'Fa#4' 'Fa#5' 'Fa#6' 'Fa#7' 'Fa0' 'Fa1' 'Fa2' 'Fa3' 'Fa4' 'Fa5'
 'Fa6' 'Fa7' 'La#-1' 'La#0' 'La#1' 'La#2' 'La#3' 'La#4' 'La#5' 'La#6'
 'La#7' 'La-1' 'La0' 'La1' 'La2' 'La3' 'La4' 'La5' 'La6' 'La7' 'Mi0' 'Mi1'
 'Mi2' 'Mi3' 'Mi4' 'Mi5' 'Mi6' 'Mi7' 'Re#0' 'Re#1' 'Re#2' 'Re#3' 'Re#4'
 'Re#5' 'Re#6' 'Re#7' 'Re0' 'Re1' 'Re2' 'Re3' 'Re4' 'Re5' 'Re6' 'Re7'
 'Re8' 'Si-1' 'Si0' 'Si1' 'Si2' 'Si3' 'Si4' 'Si5' 'Si6' 'Si7' 'Sol#0'
 'Sol#1' 'Sol#2' 'Sol#3' 'Sol#4' 'Sol#5' 'Sol#6' 'Sol#7' 'Sol0' 'Sol1'
 'Sol2' 'Sol3' 'Sol4' 'Sol5' 'Sol6' 'Sol7']
Found 51821 files belonging to 102 classes.
Using 41457 files for training.
Using 10364 files for validation.
2025-04-29 17:08:13.076148: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: SSE SSE2 SSE3 SSE4.1 SSE4.2 AVX AVX2 AVX512F AVX512_VNNI AVX512_BF16 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.

label names: ['Do#0' 'Do#1' 'Do#2' 'Do#3' 'Do#4' 'Do#5' 'Do#6' 'Do#7' 'Do#8' 'Do0'
 'Do1' 'Do2' 'Do3' 'Do4' 'Do5' 'Do6' 'Do7' 'Do8' 'Fa#0' 'Fa#1' 'Fa#2'
 'Fa#3' 'Fa#4' 'Fa#5' 'Fa#6' 'Fa#7' 'Fa0' 'Fa1' 'Fa2' 'Fa3' 'Fa4' 'Fa5'
 'Fa6' 'Fa7' 'La#-1' 'La#0' 'La#1' 'La#2' 'La#3' 'La#4' 'La#5' 'La#6'
 'La#7' 'La-1' 'La0' 'La1' 'La2' 'La3' 'La4' 'La5' 'La6' 'La7' 'Mi0' 'Mi1'
 'Mi2' 'Mi3' 'Mi4' 'Mi5' 'Mi6' 'Mi7' 'Re#0' 'Re#1' 'Re#2' 'Re#3' 'Re#4'
 'Re#5' 'Re#6' 'Re#7' 'Re0' 'Re1' 'Re2' 'Re3' 'Re4' 'Re5' 'Re6' 'Re7'
 'Re8' 'Si-1' 'Si0' 'Si1' 'Si2' 'Si3' 'Si4' 'Si5' 'Si6' 'Si7' 'Sol#0'
 'Sol#1' 'Sol#2' 'Sol#3' 'Sol#4' 'Sol#5' 'Sol#6' 'Sol#7' 'Sol0' 'Sol1'
 'Sol2' 'Sol3' 'Sol4' 'Sol5' 'Sol6' 'Sol7']
(64, 64000)
(64,)
Label: Mi2
Waveform shape: (64000,)
Spectrogram shape: (499, 129, 1)
Audio playback
<IPython.lib.display.Audio object>
Label: La#2
Waveform shape: (64000,)
Spectrogram shape: (499, 129, 1)
Audio playback
<IPython.lib.display.Audio object>
Label: Re5
Waveform shape: (64000,)
Spectrogram shape: (499, 129, 1)
Audio playback
<IPython.lib.display.Audio object>
Input shape: (499, 129, 1)
2025-04-29 17:08:27.253342: I tensorflow/core/kernels/data/shuffle_dataset_op.cc:422] Filling up shuffle buffer (this may take a while): 393 of 10000
2025-04-29 17:08:34.102113: I tensorflow/core/kernels/data/shuffle_dataset_op.cc:450] Shuffle buffer filled.
Flattened spectrogram shape: (64, 64371)
Label shape: (64,)
Epoch 1/10
648/648 [==============================] - 52s 80ms/step - loss: 4.3925 - accuracy: 0.2218 - val_loss: 2.8902 - val_accuracy: 0.4087
Epoch 2/10
648/648 [==============================] - 51s 78ms/step - loss: 3.3280 - accuracy: 0.3152 - val_loss: 2.6185 - val_accuracy: 0.4328
Epoch 3/10
648/648 [==============================] - 53s 82ms/step - loss: 3.0326 - accuracy: 0.3414 - val_loss: 2.3414 - val_accuracy: 0.4568
Epoch 4/10
648/648 [==============================] - 52s 81ms/step - loss: 2.8766 - accuracy: 0.3514 - val_loss: 2.2578 - val_accuracy: 0.4500
Epoch 5/10
648/648 [==============================] - 53s 82ms/step - loss: 2.7883 - accuracy: 0.3593 - val_loss: 2.2010 - val_accuracy: 0.4595
Epoch 6/10
648/648 [==============================] - 52s 80ms/step - loss: 2.7089 - accuracy: 0.3700 - val_loss: 2.1681 - val_accuracy: 0.4853
Epoch 7/10
648/648 [==============================] - 54s 84ms/step - loss: 2.6209 - accuracy: 0.3798 - val_loss: 2.1228 - val_accuracy: 0.4905
Epoch 8/10
648/648 [==============================] - 53s 82ms/step - loss: 2.5422 - accuracy: 0.3875 - val_loss: 2.0728 - val_accuracy: 0.4913
Epoch 9/10
648/648 [==============================] - 50s 78ms/step - loss: 2.5050 - accuracy: 0.3967 - val_loss: 2.0560 - val_accuracy: 0.4959
Epoch 10/10
648/648 [==============================] - 55s 84ms/step - loss: 2.4466 - accuracy: 0.4019 - val_loss: 2.0330 - val_accuracy: 0.5014
Input shape: (64, 499, 129, 1)
Label shape: (64,)

# Piano Notes Audio Recognition

Acest proiect utilizează un perceptron multiclayer (MLP) pentru recunoașterea notelor pianului pe baza spectrogramelor audio.

## Structura proiectului

### Etichete și spectrograme
Modelul analizează spectrogramele audio asociate cu note muzicale specifice, cum ar fi `Mi2`, `La#2`, `Re5`. Spectrogramele au dimensiunea `(499, 129, 1)`.

### Date utilizate
- **Total fișiere:** 51.821
- **Date de antrenament:** 41.457 fișiere
- **Date de validare:** 10.364 fișiere

### Rezultatele antrenamentului
Modelul a fost antrenat pe 10 epoci, iar performanța a fost următoarea:
- **Precizia la antrenament:** Precizia a crescut progresiv, atingând ~40% în ultima epocă.
- **Precizia la validare:** Valoarea maximă a fost ~50%, ceea ce indică că modelul identifică corect aproximativ jumătate dintre clasele de note.
- **Loss:** Scăderea valorii `loss` arată o îmbunătățire constantă a predicțiilor modelului.

### Observații
Performanța modelului este moderată, dar poate fi îmbunătățită prin:
1. **Preprocesare avansată:** Normalizarea spectrogramelor sau utilizarea augmentării datelor.
2. **Optimizarea hiperparametrilor:** Ajustarea dimensiunii rețelei, a ratei de învățare etc.
3. **Feature Engineering:** Adăugarea unor caracteristici suplimentare din datele audio.
4. **Arhitecturi mai complexe:** Utilizarea unor modele avansate precum Convolutional Neural Networks (CNN).

## Cum se utilizează
1. **Pornirea antrenamentului:** Folosește scriptul `AntrenareMLP.py` pentru a antrena modelul.
   ```bash
   python .venv\Scripts\python.exe AntrenareMLP.py


======================================Concluzii:
MLP: Bun pentru baseline, dar pierde informația spațială și temporală.

CNN: Ideal pentru spectrograme – învață tipare locale (note, armonici).

RNN: Bun pentru date secvențiale – menține ordinea temporală (ar fi ideal pentru secvențe de note în timp).
